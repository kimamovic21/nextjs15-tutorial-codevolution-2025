Next.js 15 Tutorial Beginner to Advanced


App installation

-open link: https://nextjs.org/
-open link: https://nextjs.org/docs/app/getting-started/installation
-create folder hello-world 
-enter folder cd hello-world and type command: npx create-next-app@latest .


Project Structure

-type command: npm run dev
-open link: https://nextjs.org/docs/app/getting-started/project-structure


Before We Start

-open link: https://nextjs.org/docs/app/getting-started/server-and-client-components


Routing

-open link: https://nextjs.org/docs/pages/building-your-application/routing
-create new Next.js app routing-demo
-create folders about and profile
-in folders about and profile create components page.tsx
-open rotes: http://localhost:3000/about and http://localhost:3000/profile
-open route: http://localhost:3000/test


Nested routes

-open link: https://nextjs.org/docs/app/getting-started/layouts-and-pages
-create folder blog and component page.tsx
-open route: http://localhost:3000/blog
-in folder blog create folders first and second
-in folders first and second create components page.tsx
-open route: http://localhost:3000/blog/first and http://localhost:3000/blog/second


Dynamic routes

-open link: https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes
-create folder products and component page.tsx
-open route: http://localhost:3000/products
-create folder [productId] and component page.tsx
-open route: http://localhost:3000/products/[productId]
-in component [productId]/page.tsx add to function ProductDetails() parameter params with type Promise
-make function ProductDetailsPage() async
-destructure variable const { productId } from await params


Nested dynamic routes

-in folder [productId] create folders reviews and [reviewId]
-in folder reviews create component page.tsx
-in component reviews/page.tsx create async function ReviewsPage()
-add to function ReviewsPage() parameter params with type Promise
-destructure variable const { productId } from await params
-open route: http://localhost:3000/products/1/reviews
-in folder [reviewId] create component page.tsx
-in component [reviewId]/page.tsx create async function ProductReviewPage()
-add to function ProductReviewPage() parameter params with type Promise
-destructure variables const { productId, reviewId } from await params
-open route: http://localhost:3000/products/1/reviews/1


Catch all segments

-create folders docs and [...slug]
-in folder [...slug] create component page.tsx
-in component [...slug]/page.tsx create async function SlugPage()
-add to function SlugPage() parameter params with type Promise
-destructure variable const { slug } from await params
-open route: http://localhost:3000/docs/feature1/concept1/example1
-open route: http://localhost:3000/docs/routing
-open route: http://localhost:3000/docs/routing/catch-all-segments


Not found page

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/not-found
-in folder app create component not-found.tsx
-in component not-found.tsx create function NotFoundPage()
-in component [reviewId]/page.tsx import function notFound from package next/navigation
-open route: http://localhost:3000/test
-in folder [reviewId] create component not-found.tsx
-in component [reviewId]/not-found.tsx add directive 'use client'
-create and export function NotFoundPage()
-import function usePathname from package next/navigation
-create variables const pathname, const productId and const reviewId
-open route: http://localhost:3000/products/1/reviews/10000


File colocation

-create folder dashboard and components line-chart.tsx and page.tsx


Private folders

-create folder _lib and component page.tsx
-open route: http://localhost:3000/_lib


Route groups

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/route-groups
-create folder (auth)
-in folder (auth) create folders register, login and forgot-password
-create components page.tsx
-open route: http://localhost:3000/register
-open route: http://localhost:3000/login
-open route: http://localhost:3000/forgot-password


Layouts

-open link: https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layoutshttps://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts
-in component layout.tsx create elements header and footer


Nested layouts

-in folder [productId] create component layout.tsx
-open route: http://localhost:3000/products/1


Multiple root layouts

-in folder (auth) create component layout.tsx
-create folders (marketing), customers and revenue
-in folders customers and revenue create components page.tsx
-in folder (marketing) create components page.tsx and layout.tsx
-open routes: http://localhost:3000/register and http://localhost:3000/login
-open routes: http://localhost:3000/customers and http://localhost:3000/revenue


Routing metadata

-open link: https://nextjs.org/learn/dashboard-app/adding-metadata
-in folder app create components page.tsx and layout.tsx
-in component about/page.tsx create and export variable const metadata
-in component [productId]/page.tsx import type Metadata from package next
-create type Props
-create and export async function generateMetadata()
-open route: http://localhost:3000/products/1
-create folder counter and component page.tsx
-create component counter.tsx
-in component counter/page.tsx import component Counter from component counter.tsx
-open route: http://localhost:3000/counter


Metadata title object

-in component layout.tsx add key - value pairs to object title
-in component blog/page.tsx create and export variable const metadata
-open route: http://localhost:3000/blog


Link component

-open link: https://nextjs.org/docs/app/api-reference/components/link
-open link: https://nextjs.org/docs/app/getting-started/linking-and-navigating
-in component app/page.tsx import component Link from package next/link
-in component products/page.tsx import component Link


Active links

-open link: https://nextjs.org/docs/app/api-reference/functions/use-pathname
-in component (auth)/layout.tsx import function usePathname from package next/navigation
-create variable const navLinks
-add directive 'use client'
-create variable const pathname


Params and searchParams

-open link: https://nextjs.org/docs/app/api-reference/functions/use-params
-create folders articles and [articleId]
-in folders articles and [articleId] create components page.tsx
-in component articles create component ArticlesPage()
-in component [articleId]/page.tsx create function ArticleDetailsPage()
-add to function ArticleDetailsPage() parameters params and searchParams with types
-import function use and component Link
-open route: http://localhost:3000
-open route: http://localhost:3000/articles
-open route: http://localhost:3000/articles/breaking-news-123?lang=en


Navigating programmatically

-open link: https://nextjs.org/docs/app/api-reference/functions/use-router
-create folder order-product and component page.tsx
-in component order-product/page.tsx create function OrderProductPage()
-import function useRouter from package next/navigation
-create function handleNavigate()
-open link: https://nextjs.org/docs/app/guides/redirecting
-in component [reviewId]/page.tsx import function redirect from package next/navigation
-open route: http://localhost:3000/products/1/reviews/1001


Templates

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/template
-in component (auth)/layout.tsx import function useState from package react
-create state variable const input and set function setInput
-in jsx create input element
-rename component layout.tsx to template.tsx
-open route: http://localhost:3000/register


Loading UI

-open route: https://nextjs.org/docs/app/api-reference/file-conventions/loading
-in folder blog create component loading.tsx
-open route: http://localhost:3000/blog
-in component blog/page.tsx invoke function await new Promise()


Error Handling

-open link: https://nextjs.org/docs/app/getting-started/error-handling
-open route: http://localhost:3000/products/1/reviews/1
-in component [reviewId]/page.tsx create function getRandomInteger()
-create component error.tsx
-in component error.tsx create component ErrorBoundary()
-add to function ErrorBoundary() parameter error with type Error
-open route: http://localhost:3000/products/1/reviews/1


Recovering from errors

-in component error.tsx, add to function ErrorBoundary() parameter reset
-import functions startTransition and useRouter
-create variable const router and function reload()
-in jsx create button element with event onClick
-in event onClick pass invoke anonymous function
-open route: http://localhost:3000/products/1/reviews/1


Handling errors in nested routes

-try moving component error.tsx to folder products
-open route: http://localhost:3000/products/1/reviews/1


Handling errors in layouts

-in folder products create component error.tsx
-open route: http://localhost:3000/products/1/reviews/1


Handling global errors

-create component error-wrapper.tsx and function ErrorWrapper()
-in component layout.tsx import component ErrorWrapper from component error-wrapper.tsx
-create component global-error.tsx and function GlobalError()
-open route: http://localhost:3000


Parallel routes

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/parallel-routes
-create folder complex-dashboard and components page.tsx and layout.tsx
-create component card.tsx
-in folder complex-dashboard create folders @notifications, @revenue and @users
-in these folders create components page.tsx
-in all these files import component Card from component card.tsx
-open route: http://localhost:3000/complex-dashboard