Next.js 15 Tutorial Beginner to Advanced


App installation

-open link: https://nextjs.org/
-open link: https://nextjs.org/docs/app/getting-started/installation
-create folder hello-world 
-enter folder cd hello-world and type command: npx create-next-app@latest .


Project Structure

-type command: npm run dev
-open link: https://nextjs.org/docs/app/getting-started/project-structure


Before We Start

-open link: https://nextjs.org/docs/app/getting-started/server-and-client-components


Routing

-open link: https://nextjs.org/docs/pages/building-your-application/routing
-create new Next.js app routing-demo
-create folders about and profile
-in folders about and profile create components page.tsx
-open rotes: http://localhost:3000/about and http://localhost:3000/profile
-open route: http://localhost:3000/test


Nested routes

-open link: https://nextjs.org/docs/app/getting-started/layouts-and-pages
-create folder blog and component page.tsx
-open route: http://localhost:3000/blog
-in folder blog create folders first and second
-in folders first and second create components page.tsx
-open route: http://localhost:3000/blog/first and http://localhost:3000/blog/second


Dynamic routes

-open link: https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes
-create folder products and component page.tsx
-open route: http://localhost:3000/products
-create folder [productId] and component page.tsx
-open route: http://localhost:3000/products/[productId]
-in component [productId]/page.tsx add to function ProductDetails() parameter params with type Promise
-make function ProductDetailsPage() async
-destructure variable const { productId } from await params


Nested dynamic routes

-in folder [productId] create folders reviews and [reviewId]
-in folder reviews create component page.tsx
-in component reviews/page.tsx create async function ReviewsPage()
-add to function ReviewsPage() parameter params with type Promise
-destructure variable const { productId } from await params
-open route: http://localhost:3000/products/1/reviews
-in folder [reviewId] create component page.tsx
-in component [reviewId]/page.tsx create async function ProductReviewPage()
-add to function ProductReviewPage() parameter params with type Promise
-destructure variables const { productId, reviewId } from await params
-open route: http://localhost:3000/products/1/reviews/1


Catch all segments

-create folders docs and [...slug]
-in folder [...slug] create component page.tsx
-in component [...slug]/page.tsx create async function SlugPage()
-add to function SlugPage() parameter params with type Promise
-destructure variable const { slug } from await params
-open route: http://localhost:3000/docs/feature1/concept1/example1
-open route: http://localhost:3000/docs/routing
-open route: http://localhost:3000/docs/routing/catch-all-segments


Not found page

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/not-found
-in folder app create component not-found.tsx
-in component not-found.tsx create function NotFoundPage()
-in component [reviewId]/page.tsx import function notFound from package next/navigation
-open route: http://localhost:3000/test
-in folder [reviewId] create component not-found.tsx
-in component [reviewId]/not-found.tsx add directive 'use client'
-create and export function NotFoundPage()
-import function usePathname from package next/navigation
-create variables const pathname, const productId and const reviewId
-open route: http://localhost:3000/products/1/reviews/10000


File colocation

-create folder dashboard and components line-chart.tsx and page.tsx


Private folders

-create folder _lib and component page.tsx
-open route: http://localhost:3000/_lib


Route groups

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/route-groups
-create folder (auth)
-in folder (auth) create folders register, login and forgot-password
-create components page.tsx
-open route: http://localhost:3000/register
-open route: http://localhost:3000/login
-open route: http://localhost:3000/forgot-password


Layouts

-open link: https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layoutshttps://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts
-in component layout.tsx create elements header and footer


Nested layouts

-in folder [productId] create component layout.tsx
-open route: http://localhost:3000/products/1


Multiple root layouts

-in folder (auth) create component layout.tsx
-create folders (marketing), customers and revenue
-in folders customers and revenue create components page.tsx
-in folder (marketing) create components page.tsx and layout.tsx
-open routes: http://localhost:3000/register and http://localhost:3000/login
-open routes: http://localhost:3000/customers and http://localhost:3000/revenue


Routing metadata

-open link: https://nextjs.org/learn/dashboard-app/adding-metadata
-in folder app create components page.tsx and layout.tsx
-in component about/page.tsx create and export variable const metadata
-in component [productId]/page.tsx import type Metadata from package next
-create type Props
-create and export async function generateMetadata()
-open route: http://localhost:3000/products/1
-create folder counter and component page.tsx
-create component counter.tsx
-in component counter/page.tsx import component Counter from component counter.tsx
-open route: http://localhost:3000/counter


Metadata title object

-in component layout.tsx add key - value pairs to object title
-in component blog/page.tsx create and export variable const metadata
-open route: http://localhost:3000/blog


Link component

-open link: https://nextjs.org/docs/app/api-reference/components/link
-open link: https://nextjs.org/docs/app/getting-started/linking-and-navigating
-in component app/page.tsx import component Link from package next/link
-in component products/page.tsx import component Link


Active links

-open link: https://nextjs.org/docs/app/api-reference/functions/use-pathname
-in component (auth)/layout.tsx import function usePathname from package next/navigation
-create variable const navLinks
-add directive 'use client'
-create variable const pathname


Params and searchParams

-open link: https://nextjs.org/docs/app/api-reference/functions/use-params
-create folders articles and [articleId]
-in folders articles and [articleId] create components page.tsx
-in component articles create component ArticlesPage()
-in component [articleId]/page.tsx create function ArticleDetailsPage()
-add to function ArticleDetailsPage() parameters params and searchParams with types
-import function use and component Link
-open route: http://localhost:3000
-open route: http://localhost:3000/articles
-open route: http://localhost:3000/articles/breaking-news-123?lang=en


Navigating programmatically

-open link: https://nextjs.org/docs/app/api-reference/functions/use-router
-create folder order-product and component page.tsx
-in component order-product/page.tsx create function OrderProductPage()
-import function useRouter from package next/navigation
-create function handleNavigate()
-open link: https://nextjs.org/docs/app/guides/redirecting
-in component [reviewId]/page.tsx import function redirect from package next/navigation
-open route: http://localhost:3000/products/1/reviews/1001


Templates

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/template
-in component (auth)/layout.tsx import function useState from package react
-create state variable const input and set function setInput
-in jsx create input element
-rename component layout.tsx to template.tsx
-open route: http://localhost:3000/register


Loading UI

-open route: https://nextjs.org/docs/app/api-reference/file-conventions/loading
-in folder blog create component loading.tsx
-open route: http://localhost:3000/blog
-in component blog/page.tsx invoke function await new Promise()


Error Handling

-open link: https://nextjs.org/docs/app/getting-started/error-handling
-open route: http://localhost:3000/products/1/reviews/1
-in component [reviewId]/page.tsx create function getRandomInteger()
-create component error.tsx
-in component error.tsx create component ErrorBoundary()
-add to function ErrorBoundary() parameter error with type Error
-open route: http://localhost:3000/products/1/reviews/1


Recovering from errors

-in component error.tsx, add to function ErrorBoundary() parameter reset
-import functions startTransition and useRouter
-create variable const router and function reload()
-in jsx create button element with event onClick
-in event onClick pass invoke anonymous function
-open route: http://localhost:3000/products/1/reviews/1


Handling errors in nested routes

-try moving component error.tsx to folder products
-open route: http://localhost:3000/products/1/reviews/1


Handling errors in layouts

-in folder products create component error.tsx
-open route: http://localhost:3000/products/1/reviews/1


Handling global errors

-create component error-wrapper.tsx and function ErrorWrapper()
-in component layout.tsx import component ErrorWrapper from component error-wrapper.tsx
-create component global-error.tsx and function GlobalError()
-open route: http://localhost:3000


Parallel routes

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/parallel-routes
-create folder complex-dashboard and components page.tsx and layout.tsx
-create component card.tsx
-in folder complex-dashboard create folders @notifications, @revenue and @users
-in these folders create components page.tsx
-in all these files import component Card from component card.tsx
-open route: http://localhost:3000/complex-dashboard


Unmatched routes

-in folder @notifications create folder archived and component page.tsx
-in components @notifications/page.tsx and archived/page.tsx import component Link
-create three components default.tsx
-open route: http://localhost:3000/complex-dashboard
-open route: http://localhost:3000/complex-dashboard/archived


Conditional routes

-folder complex-dashboard create folder @login and component page.tsx
-in component @login/page.tsx create variable const isLoggedIn
-add ternary condition for variable isLoggedIn
-in component layout.tsx add to function ComplexDashboardLayout() parameter login with type
-open route: http://localhost:3000/complex-dashboard


Intercepting routes

-open link: https://nextjs.org/docs/app/api-reference/file-conventions/intercepting-routes
-create folder f1 and component page.tsx
-in component f1/page.tsx import component Link
-in folder f1 create folder f2 and component page.tsx
-open route: http://localhost:3000/f1
-in folder f1 create folder (.)f2 and component page.tsx
-in folder app create folder f3 and component page.tsx
-in folder f1 create folder (..)f3 and component page.tsx
-in folder app create folder f4 and component page.tsx
-open route: http://localhost:3000/f1/f2
-in folder f2 create folder (..)(..)f4 and component page.tsx
-open route: http://localhost:3000/f4
-in folder app create folder f5 and component page.tsx
-in folder f2 create folder inner-f2 and component page.tsx
-in folder inner-f2 create folder (...)f5 and component page.tsx
-open route: http://localhost:3000/f5
-open route: http://localhost:3000/f1/f2/inner-f2


Parallel intercepting routes

-create folder photo-feed and components page.tsx, modal.tsx and layout.tsx
-create file wonders.ts
-create folder photos with images
-create folder [id] and component page.tsx
-create folder @modal and component default.tsx
-in folder @modal create folder (.)[id] and component page.tsx
-open route: http://localhost:3000/photo-feed


Route handlers

-open route: https://nextjs.org/docs/app/getting-started/route-handlers-and-middleware
-create new Next.js 15 project route-handlers
-in folder app create folder hello and route.ts file
-in route.ts file create and export async function GET()
-open route: http://localhost:3000/hello
-create folder dashboard and route.ts file
-in route.ts file create and export async function GET()
-open route: http://localhost:3000/dashboard
-in folder dashboard create folder user and route.ts file
-in route.ts file create and export async function GET()
-open route: http://localhost:3000/dashboard
-create folder profile and component page.tsx
-in folder profile create folder api and route.ts file
-in route.ts file create and export async function GET()
-open route: http://localhost:3000/profile
-open route: http://localhost:3000/profile/api


Handling GET Requests

-in folder app create folder comment and comment page.tsx
-in folder comments create folder api
-in folder api create files data.ts and route.ts
-in data.ts file create comments array
-in route.ts file create and export async function GET()
-Open Postman and send GET request for route: http://localhost:3000/comments


Handling POST Requests

-in route.ts file create and export async function POST()
-Open Postman and send POST request for route: http://localhost:3000/comments


Dynamic route handlers

-in folder comments create folder [id] and comment page.tsx and route.ts file
-in route.ts file create and export async function GET()
-open Postman and send GET request for route: http://localhost:3000/comments/1


Handling PATCH Requests

-in route.ts file create and export async function PATCH()
-Open Postman and send PATCH request for route: http://localhost:3000/comments/1


Handling DELETE Requests

-in route.ts file create and export async function DELETE()
-Open Postman and send DELETE request for route: http://localhost:3000/comments/1


URL query params

-delete folders api, components page.tsx and move files to folders comments and [id]
-in comments/api/route.ts file import type NextResponse from package next/server
-add to function GET() parameter request with type NextRequest
-create variables const searchParams, const query and const filteredComments
-Open Postman and send GET request for route: http://localhost:3000/comments?query=first


Headers in route handlers

-open link: https://nextjs.org/docs/app/api-reference/functions/headers
-in profile/api/route.ts file import type NextRequest
-add to function GET() parameter request with type
-create variable const requestHeaders
-add return new Response()
-import function headers from package next/headers
-create variable const headerList 
-Open Postman and send GET request for route: http://localhost:3000/profile/api


Cookies in route handlers

-open link: https://nextjs.org/docs/app/api-reference/functions/cookies
-in route.ts file create variable const theme
-import function cookies from package next/headers
-create variable const cookieStore
-Open Postman and send GET request for route: http://localhost:3000/profile/api


Redirects in route handlers

-in folder app create folders v1, v2 and users
-in folders users create files route.ts
-in v1/users/route.ts file import function redirect from package next/navigation
-create and export async function GET()
-in function GET() invoke function redirect('/api/v2/users')
-in v2/users/route.ts file create and export async function GET()
-create type UserV2
-Open Postman and send GET request for route: http://localhost:3000/v1/users
-Open Postman and send GET request for route: http://localhost:3000/v2/users


Caching in route handlers

-in folder app create folder time and route.ts file
-in time/route.ts file create and export async function GET()
-create folder categories and route.ts file
-in categories/route.ts file create and export async function GET()
-create and export variable const dynamic
-in time/route.ts file create and export variables dynamic and revalidate
-open route: http://localhost:3000/time
-open route: http://localhost:3000/categories


Middleware

-in folder src create middleware.ts file
-in middleware.ts file import object NextResponse and type NextRequest from package next/server
-create function middleware()
-create and export object const config
-open route: http://localhost:3000/profile


Rendering


Client-side Rendering (CSR)


Server-side Rendering (SSR)


Suspense SSR


React server components


Server and client components

-create new Next.js app rendering-demo
-in folder app create folder about and component page.tsx
-open route: http://localhost:3000/about
-create folder dashboard and component page.tsx
-in component dashboard/page.tsx add directive 'use client'
-open route: http://localhost:3000/dashboard


RSC rendering lifecycle


Static rendering

-open route: http://localhost:3000/about


Dynamic rendering

-in component about/page.tsx import function cookies from package next/cookies
-open route: http://localhost:3000/about


Function generateStaticParams

-open route: https://nextjs.org/docs/app/api-reference/functions/generate-static-params
-in folder app create folder products and component page.tsx
-in folder products create folder [id] and component page.tsx
-in component products/[id]/page.tsx create and export function generateStaticParams()
-open route: http://localhost:3000/products
-open route: http://localhost:3000/products/1


Function dynamicParams

-in component [id]/page.tsx create and export variable const dynamicParams
-open route: http://localhost:3000/products/1


Streaming 

-open link: https://react.dev/reference/react/Suspense
-in folder app create folder product-reviews
-in folder product-reviews create components page.tsx, product.tsx and reviews.tsx
-in component page.tsx import components Product and Reviews
-in component page.tsx import component Suspense from package react
-in jsx wrap components Product and Reviews with Suspense component
-add to components Suspense prop fallback
-open route: http://localhost:3000/product-reviews


Server and client composition patterns


Server-only code

-in folder app create folders server-route and client-route
-in folders server-route and client-route create components page.tsx
-in folder src create folder utils and server-utils.ts file
-in server-utils.ts file create and export function serverSideFunction()
-in component server-route/page.tsx import function serverSideFunction from server-utils.ts
-open route: http://localhost:3000/server-route
-in component client-route/page.tsx import function serverSideFunction from server-utils.ts
-add directive 'use client'
-open route: http://localhost:3000/client-route
-open route: https://www.npmjs.com/package/server-only
-type command: npm i server-only
-in server-utils.ts file import package server-only
-open route: http://localhost:3000/client-route
-open route: http://localhost:3000/server-route
-in folder client-route create component client-component.tsx
-in component client-route/page.tsx import component ClientComponent from client-component.tsx
-open route: http://localhost:3000/client-route
-open route: http://localhost:3000/server-route


Third party packages

-open link: https://www.npmjs.com/package/slick-carousel
-type command: npm i slick-carousel
-open link: https://www.npmjs.com/package/react-slick
-type command: npm i react-slick
-open link: https://www.npmjs.com/package/@types/react-slick
-type command: npm i @types/react-slick
-create component image-slider.tsx
-in component image-slider.tsx add logic for Slider component
-in component client-route/page.tsx import component ImageSlider from component image-slider.tsx
-open route: http://localhost:3000/client-route
-try to add logic for slider component in component server-rote/page.tsx
-open route: http://localhost:3000/server-route


Context providers

-create folder components and component theme-provider.tsx
-in component theme-provider.tsx add logic for ThemeProvider component
-in component layout.tsx import component ThemeProvider from component theme-provider.tsx
-in component client-component.tsx import function useTheme from component theme-provider.tsx
-open route: http://localhost:3000/client-route


Client-only code

-in folder utils create client-utils.ts file
-in client-utils.ts file create and export function clientSideFunction()
-in component client-route/page.tsx import function clientSideFunction from client-utils.ts
-open link: https://www.npmjs.com/package/client-only
-type command: npm i client-only
-in client-utils.ts file import package client-only
-in component client-route/page.tsx import function clientSideFunction from client-utils.ts
-open route: http://localhost:3000/client-route
-in component client-component.tsx import function clientSideFunction from client-utils.ts
-open route: http://localhost:3000/client-route


Client component placement

-in folder app create folder landing-page
-in folder landing-page create components page.tsx, nav-links.tsx, nav-search.tsx and navbar.tsx
-in component page.tsx import component Navbar from component navbar.tsx
-in component navbar.tsx import components NavLinks from component nav-links.tsx and NavSearch from component nav-search.tsx
-open route: http://localhost:3000/landing-page
-in component nav-search.tsx add directive 'use client'
-import function useState from package react
-create set variable search and set function setSearch


Interleaving server and client components

-in folder app create folder interleaving and component page.tsx
-in folder interleaving create four components, two client and two server
-in component page.tsx import component ServerComponentOne from component server-component-one.tsx
-in component server-component-one.tsx import component ServerComponentTwo from component server-component-two.tsx
-open route: http://localhost:3000/interleaving
-in component page.tsx import component ClientComponentOne from component client-component-one.tsx
-in component client-component-one.tsx import component ClientComponentTwo from component client-component-two.tsx
-in component server-component-one.tsx import component ClientComponentOne from component client-component-one.tsx
-in component page.tsx import component ClientComponentOne form component client-component-one.tsx
-in component client-component-one.tsx import component ServerComponentOne from component server-component-one.tsx
-open route: http://localhost:3000/interleaving


Data Fetching

-create folder data-fetching
-in folder data-fetching create next Next.js 15 app


Fetching data in client components

-open link: https://jsonplaceholder.typicode.com/
-open link: https://jsonplaceholder.typicode.com/users
-create folder users-client and component page.tsx
-in component page.tsx add directive 'use client'
-create type User
-create and export function UsersClientPage as default
-import functions useState and useEffect
-create three state variables and three set functions
-invoke function useEffect()
-add conditions if (loading) and if (error)
-in jsx create HTML elements with Tailwind CSS classes
-in element ul invoke function users?.map()
-open route: http://localhost:3000/users-client


Fetching data in server components

-create folder users-server and component page.tsx
-create type User
-create and export async function UsersServerPage as default
-create variables const response and const users
-in jsx create HTML elements with Tailwind CSS classes
-in element ul invoke function users?.map()
-open route http://localhost:3000/users-server


Loading and error states

-in folder users-server create component loading.tsx
-in component users-server invoke function await new Promise()
-open route: http://localhost:3000/users-server
-create component error.tsx
-open route http://localhost:3000/users-server


Sequential data fetching

-open link: https://jsonplaceholder.typicode.com/posts
-create folder posts-sequential and component page.tsx
-in component page.tsx create and export async function PostsSequentialPage as default
-create type Post
-create variables const response, const posts and const filteredPosts
-open route: http://localhost:3000/posts-sequential
-create component author.tsx
-in component page.tsx import component Author from component author.tsx
-import component Suspense
-in jsx add component Suspense with prop fallback
-in component Suspense add component Author with prop userId
-open route: http://localhost:3000/posts-sequential


Parallel data fetching

-open link: https://jsonplaceholder.typicode.com/albums
-create folders user-parallel and [id]
-in folder [id] create component page.tsx
-in component page.tsx create types Post and Album
-create async functions getUserPosts() and getUserAlbums()
-create and export async function UserParallelIdPage()
-destructure variable const { userId } from await params
-create variables const postsData and const albumsData
-invoke function await Promise.all()
-in jsx create HTML elements with Tailwind CSS classes
-create component loading.tsx
-open route: http://localhost:3000/user-parallel/1


Fetching from a database

-open link: https://www.prisma.io
-type command: npm i prisma -D
-open link: https://www.npmjs.com/package/@prisma/client
-type command: npm i @prisma/client
-type command: npx prisma init --datasource-provider sqlite
-update .gitignore file 
-in schema.prisma file create model Product
-type command: npx prisma migrate dev --name init
-create prisma-db.ts file
-in prisma-db.ts file create more functions
-type command: npx prisma generate
-create folder products-db and component page.tsx
-in component page.tsx import function getProducts from prisma-db.ts file
-create type Product
-create and export async function ProductsDBPage()
-in jsx create HTML elements with Tailwind CSS classes
-open route: http://localhost:3000/products-db


Data mutations

-create folder react-form and component page.tsx
-in component page.tsx add logic for form submission
-create folder api and route.ts file
-in route.ts file create and export async function POST()
-open route: http://localhost:3000/react-form


Forms with server actions

-create folder products-db-create and component page.tsx
-in component page.tsx add logic for form submission
-open route: http://localhost:3000/products-db-create


Pending State with useFormStatus

-open link: https://react.dev/reference/react-dom/hooks/useFormStatus
-create component submit-button.tsx
-in component page.tsx import component SubmitButton from component submit-button.tsx
-open route: http://localhost:3000/products-db-create


Form Validation with useActionState

-open link: https://react.dev/reference/react/useActionState
-create example.env file
-in component page.tsx import function useFormStatus from package react
-add directive 'use client'
-create types type Errors and type FormState
-create variable const initialState
-invoke function useFormStatus()
-the values of function useFormStatus() store in array const [state, formAction, isPending] 
-create variable const errors
-add four if conditions
-in jsx add three states for error message state.errors
-in component submit-button.tsx create type SubmitButtonProps
-add to function SubmitButton parameter isPending with type SubmitButtonProps
-in jsx add ternary operator isPending
-open route: http://localhost:3000/products-db-create


Separating server actions

-open link: https://nextjs.org/docs/14/app/building-your-application/data-fetching/server-actions-and-mutations
-in folder src create folder actions and products.ts file
-move function createProduct from page.tsx to products.ts file
-in component page.tsx import function createProduct and types from actions/products.ts
-create component products-form.tsx
-move client logic from component page.tsx to component products-form.tsx
-in component page.tsx import component ProductsForm from component products-form.tsx
-open route: http://localhost:3000/products-db


useFormStatus vs useActionState


Update server action

-in folder products-db create folder [id]
-in folder [id] create components page.tsx, product-edit-form.tsx and submit-button.tsx
-in component page.tsx import component ProductEditForm from component product-edit-form.tsx
-in products-db/page.tsx component import component Link 
-in products.ts file create and export async function editProduct()
-open route: http://localhost:3000/products-db
-open route: http://localhost:3000/products-db/1


Delete server action

-open link: https://nextjs.org/docs/app/api-reference/functions/revalidatePath
-in products.ts file import function deleteProduct from prisma-db.ts file
-create and export async function removeProduct()
-import function revalidatePath from package next/cache
-in component products-db/page.tsx import component removeProduct from products.ts file
-in jsx create elements form and button
-open route: http://localhost:3000/products-db


Optimistic updates

-open link: https://react.dev/reference/react/useOptimistic
-create component products-details.tsx
-in component products-details.tsx import function useOptimistic from package react
-invoke function useOptimistic()
-the value of function useOptimistic() store in array const [optimisticProducts, setOptimisticProducts]
-create async function removeProductById()
-in jsx invoke function optimisticProducts?.map()
-in component page.tsx import component ProductsDetails from component products-details.tsx
-open route: http://localhost:3000/products-db


Form component

-open link: https://nextjs.org/docs/app/api-reference/components/form
-create components loading.tsx and search.tsx
-in comment search.tsx import component Form from package next/form
-in jsx add component Form as parent component
-in component app/page.tsx import component Search from component search.tsx
-in component products-db/page.tsx add to function ProductsDBPage() parameter searchParams with type
-destructure variable const { query }
-in component products-details.tsx import component Form from package next/form
-open route: http://localhost:3000
-open route: http://localhost:3000/products-db?query=product+1


Authentication

-open link: https://nextjs.org/docs/app/guides/authentication
-open link: https://clerk.com/
-create new Next.js project auth-demo


Clerk Setup

-open Clerk dashboard and create new app
-open link: https://www.npmjs.com/package/@clerk/nextjs
-type command: npm i @clerk/nextjs
-create files .env.local and example.env
-in .env.local file add two env variables
-create middleware.ts file and add code from documentation
-in component layout.tsx add code from documentation
-open route: http://localhost:3000


Sign in and sign out

-create folder components and component navigation.tsx
-in component navigation.tsx import Clerk components SignInButton and SignOutButton from package clerk/nextjs
-in component layout.tsx import component Navigation from component navigation.tsx
-open route: http://localhost:3000


Profile settings

-create folders user-profile, [[...user-profile]] and component page.tsx
-in component page.tsx import component UserProfile from package clerk/nextjs
-in component navigation.tsx import other components from package clerk/nextjs
-open route: http://localhost:3000/user-profile


Conditional UI rendering


Protecting routes

-in middleware.ts file import function createRouteMatcher from package clerk
-create variables const isProtectedRoute and const isPublicRoute
-in function clerkMiddleware() destructure variable const userId and function redirectToSignIn from await auth()
-add condition if (!userId && !isPublicRoute(req))
-open route: http://localhost:3000/user-profile


Read session and user data

-create folder dashboard and component page.tsx
-in component page.tsx import functions auth and currentUser from package clerk
-open route: http://localhost:3000/dashboard
-in folder components create component counter.tsx
-in component counter.tsx import functions useAuth and useUser from package clerk
-in component app/page.tsx import component Counter from component counter.tsx
-open route: http://localhost:3000


Role based access control

-open web page Clerk and follow instructions from video
-create folder types and globals.d.ts file
-in globals.d.ts file create and export type Roles
-define global object
-create folder admin and component page.tsx
-in middleware.ts file create variable isAdminRoute
-import object NextResponse from package next/server
-add if condition to check is signed in user not admin
-open route: http://localhost:3000/admin
-in folder admin create actions.ts file
-in actions.ts file add directive 'use server'
-import functions revalidatePath, auth, clerkClient and type Roles
-create and export async functions setRole() and removeRole()